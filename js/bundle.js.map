{"version":3,"file":"js/bundle.js","mappings":";;;;;;;AAAA;AACA;AACA,CAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,YAAY;;AAEZ;AACA;AACA,YAAY;;AAEZ;;AAEA;AACA;AACA;AACA,gCAAgC,sBAAsB;AACtD,UAAU;AACV;AACA,UAAU;AACV;AACA,4BAA4B,0BAA0B,SAAS,uBAAuB;AACtF,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;ACpFkB;AACyB;;AAEpC;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,+BAAqB;AACzB;;AAEA;AACA;AACA,+BAA+B,MAAM;AACrC;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;;ACrFgC;;AAEzB;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;;ACXsD;AACA;;AAEtD;AACA;AACA,IAAI,aAAa;AACjB,IAAI,aAAa;AACjB,CAAC;;;;;;ACPD","sources":["webpack://virtual-keyboard/./src/js/components/button.js","webpack://virtual-keyboard/./src/js/components/keyboard.js","webpack://virtual-keyboard/./src/js/components/textarea.js","webpack://virtual-keyboard/./src/js/index.js","webpack://virtual-keyboard/./src/scss/style.scss?e15d"],"sourcesContent":[" \n \n export class Button {\n    constructor(buttonConfig, clickHandler){\n        this.buttonConfig = buttonConfig;\n\n        this.isShifted = false;\n        this.isTranslated = false;\n        this.currentValue = this.buttonConfig.main;\n\n        this.element = document.createElement('div');\n\n        this.element.innerHTML = this._getButtonHtml();\n\n        this.element.classList.add('btn');\n\n        if(this.buttonConfig?.classes?.length){\n            this.element.classList.add(...this.buttonConfig.classes);\n        }\n\n        if (clickHandler) {\n            this.element.addEventListener('click', () =>{\n                clickHandler(this.currentValue);\n                //this.element.classList.add('active');\n            });\n        }\n\n        // this.element.addEventListener('keydown', () => {\n        //     this.element.classList.add('active'); \n        // })\n\n        // this.element.addEventListener('keyup', () => {\n        //     this.element.classList.remive('active');\n        // })\n\n    }\n\n    _getButtonHtml() {\n        if (this.buttonConfig.img) {\n            // Case when we have image as button\n            return `<img src=\"${this.buttonConfig.img}\"></img>`;\n        } else if (this.buttonConfig.display) {\n            return this.buttonConfig.display;\n        } else if (this.buttonConfig.displayShifted) {\n            // Case when we need to display additional options (row with numbers, for example)\n            return `<span>${this.buttonConfig.shifted}</span>${this.buttonConfig.main}`;\n        } else {\n            // Case when we do not show additional span with letter\n            return this.buttonConfig.main;\n        }\n    }\n\n    getElement(){\n        return this.element;\n    }\n\n    _updateSymbol(){\n        if(this.isTranslated && this.isShifted){\n            this.currentValue = this.buttonConfig.translatedShifted || this.buttonConfig.translted || this.buttonConfig.main;\n        }else if(this.isTranslated && !this.isShifted){\n            this.currentValue = this.buttonConfig.translted ||  this.buttonConfig.main;\n        }else if(!this.isTranslated && this.isShifted){\n            this.currentValue = this.buttonConfig.translatedShifted || this.buttonConfig.main;\n        }else if(!this.isTranslated && !this.isShifted){\n            this.currentValue = this.buttonConfig.main;\n        }\n         this.element.innerText = this.currentValue;\n    }\n\n    setShifted(isShifted){\n        this.isShifted = isShifted;\n        this._updateSymbol();\n    }\n\n    setTranslated(isTranslated){\n        this.isTranslated = isTranslated;\n        this._updateSymbol();\n    }\n\n    setPressed(isPressed) {\n        if (isPressed) {\n            this.element.classList.add('active');\n        } else {\n            this.element.classList.remove('active');\n        }\n    }\n}\n","import {\n    Button\n} from './button';\nimport buttonsConfig from '../buttons.json'\n\nexport function buildKeyboard() {\n    const body = document.querySelector('body');\n    const keyBoard = document.createElement('div');\n    keyBoard.classList.add('container');\n    const buttons = [];\n    let currentInputValue = '';\n\n    function simpleButtonClick(buttonValue) {\n        let textArea = document.querySelector('textarea');\n\n        currentInputValue += buttonValue;\n        textArea.innerText = currentInputValue;\n        //console.log(currentInputValue);\n    }\n    function deleteLastSymbol(){\n        let textArea = document.querySelector('textarea');\n        currentInputValue = currentInputValue.slice( 0, -1);\n        textArea.innerText = currentInputValue;\n    }\n    function deleteSymbol() {\n        let textArea = document.querySelector('textarea');\n\n        let cursorPosition = textArea.getAttribute('selectionStart');\n\n        currentInputValue = currentInputValue.slice(cursorPosition || 0, -1);\n        textArea.innerText = currentInputValue;\n    }\n\n    const handlersMap = {\n        'delete': deleteSymbol,\n        'backSpace' : deleteLastSymbol,\n    };\n\n    buttonsConfig.forEach(buttonRow => {\n        const row = createRow();\n\n        buttonRow.forEach(buttonConfig => {\n            const handler = buttonConfig.handler ? handlersMap[buttonConfig.handler] : simpleButtonClick;\n            const button = new Button(buttonConfig, handler);\n            row.append(button.getElement());\n            buttons.push(button);\n        });\n\n        keyBoard.append(row);\n        body.append(keyBoard);\n        // body.append(row);\n    });\n\n    body.addEventListener('keydown', (event) => {\n        const isButton = event.key;\n        if (!isButton) {\n            return;\n        }\n\n        console.dir(event.key);\n        \n        const filteredButtons = buttons.filter(btn => btn.buttonConfig.main === event.key);\n        if (filteredButtons.length) {\n            filteredButtons.forEach(btn => btn.setPressed(true));\n        }\n    });\n\n    body.addEventListener('keyup', (event) => {\n        const isButton = event.key;\n        if (!isButton) {\n            return;\n        }\n\n        console.dir(event.key);\n        \n        const filteredButtons = buttons.filter(btn => btn.buttonConfig.main === event.key);\n        if (filteredButtons.length) {\n            filteredButtons.forEach(btn => btn.setPressed(false));\n        }\n    });\n}\n\nfunction createRow() {\n    const rowElement = document.createElement('div');\n    rowElement.classList.add('line');\n    return rowElement;\n}","\nimport {Button} from './button';\n\nexport function buildTextarea(){\n    const body = document.querySelector('body');\n    const element = document.createElement('textarea');\n\n    element.classList.add('textarea');\n    element.setAttribute('rows', 6);\n    element.setAttribute('placeholedr', 'Write something...');\n    body.append(element);\n}","import { buildKeyboard } from './components/keyboard';\nimport { buildTextarea } from './components/textarea';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Content loaded, time to initialize keyboard');\n    buildTextarea();\n    buildKeyboard();\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}