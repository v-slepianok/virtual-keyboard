{"version":3,"file":"js/bundle.js","mappings":";;;;;;;AAAe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,0BAA0B,SAAS,uBAAuB;AAChF;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC5F8B;AACc;;AAE5C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,EAAE,+BAAqB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA;AACA,KAAK;;AAEL;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;ACjGe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;;;ACRkD;AACA;;AAElD;AACA,EAAE,aAAa;AACf,EAAE,aAAa;AACf,CAAC;;;;;;ACND","sources":["webpack://virtual-keyboard/./src/js/components/button.js","webpack://virtual-keyboard/./src/js/components/keyboard.js","webpack://virtual-keyboard/./src/js/components/textarea.js","webpack://virtual-keyboard/./src/js/index.js","webpack://virtual-keyboard/./src/scss/style.scss?e15d"],"sourcesContent":["export default class Button {\n  constructor(buttonConfig, clickHandler, releaseHandler) {\n    this.buttonConfig = buttonConfig;\n    this.clickHandler = clickHandler;\n    this.releaseHandler = releaseHandler;\n\n    this.isShifted = false;\n    this.isTranslated = false;\n    this.currentValue = this.buttonConfig.main;\n\n    this.intervalId = null;\n\n    this.element = document.createElement('div');\n\n    this.element.innerHTML = this.getButtonHtml();\n\n    this.element.classList.add('btn');\n\n    if (this.buttonConfig?.classes?.length) {\n      this.element.classList.add(...this.buttonConfig.classes);\n    }\n\n    this.element.addEventListener('mousedown', () => {\n      this.setPressed(true);\n    });\n\n    this.element.addEventListener('mouseup', () => {\n      this.setPressed(false);\n    });\n  }\n\n  getButtonHtml() {\n    if (this.buttonConfig.img) {\n      // Case when we have image as button\n      return `<img src=\"${this.buttonConfig.img}\"></img>`;\n    }\n\n    if (this.buttonConfig.display) {\n      return this.buttonConfig.display;\n    }\n\n    if (this.buttonConfig.displayShifted) {\n      // Case when we need to display additional options (row with numbers, for example)\n      return `<span>${this.buttonConfig.shifted}</span>${this.buttonConfig.main}`;\n    }\n\n    // Case when we do not show additional span with letter\n    return this.buttonConfig.main;\n  }\n\n  getElement() {\n    return this.element;\n  }\n\n  updateSymbol() {\n    if (this.isTranslated && this.isShifted) {\n      this.currentValue = this.buttonConfig.translatedShifted\n        || this.buttonConfig.translted\n        || this.buttonConfig.main;\n    } else if (this.isTranslated && !this.isShifted) {\n      this.currentValue = this.buttonConfig.translatedShifted\n        || this.buttonConfig.shifted\n        || this.buttonConfig.main;\n    } else if (!this.isTranslated && this.isShifted) {\n      this.currentValue = this.buttonConfig.shifted\n        || this.buttonConfig.main;\n    } else if (!this.isTranslated && !this.isShifted) {\n      this.currentValue = this.buttonConfig.main;\n    }\n  }\n\n  setShifted(isShifted) {\n    this.isShifted = isShifted;\n    this.updateSymbol();\n  }\n\n  setTranslated(isTranslated) {\n    this.isTranslated = isTranslated;\n    this.updateSymbol();\n  }\n\n  setPressed(isPressed) {\n    if (isPressed) {\n      this.element.classList.add('active');\n      this.clickHandler(this.currentValue);\n    } else {\n      this.element.classList.remove('active');\n      if (this.releaseHandler) {\n        this.releaseHandler(this.currentValue);\n      }\n    }\n  }\n}\n","import Button from './button';\nimport buttonsConfig from '../buttons.json';\n\nlet body;\nconst buttons = [];\n\nlet currentInputValue = '';\n\nfunction findPressedButtons(button) {\n  return buttons.filter((btn) => btn.buttonConfig.main === button\n    || btn.buttonConfig.name === button\n    || btn.buttonConfig.shifted === button\n    || btn.buttonConfig.translated === button\n    || btn.buttonConfig.translatedShifted === button);\n}\n\nfunction simpleButtonClick(buttonValue) {\n  const textArea = document.querySelector('textarea');\n\n  currentInputValue += buttonValue;\n  textArea.textContent = currentInputValue;\n}\n\nfunction deleteSymbol() {\n  const textArea = document.querySelector('textarea');\n\n  const cursorPosition = textArea.getAttribute('selectionStart');\n\n  currentInputValue = currentInputValue.slice(cursorPosition || 0, -1);\n  textArea.innerText = currentInputValue;\n}\n\nfunction shiftPressed(isShifted) {\n  buttons.forEach((btn) => btn.setShifted(isShifted));\n}\n\nfunction createRow() {\n  const rowElement = document.createElement('div');\n  rowElement.classList.add('line');\n  return rowElement;\n}\n\nexport default function buildKeyboard() {\n  body = document.querySelector('body');\n  const keyBoard = document.createElement('div');\n  keyBoard.classList.add('container');\n\n  const handlersMap = {\n    delete: deleteSymbol,\n    shiftPressed: () => shiftPressed(true),\n    shiftReleased: () => shiftPressed(false),\n  };\n\n  buttonsConfig.forEach((buttonRow) => {\n    const row = createRow();\n\n    buttonRow.forEach((buttonConfig) => {\n      const handler = buttonConfig.handler ? handlersMap[buttonConfig.handler] : simpleButtonClick;\n      const releaseHandler = buttonConfig.releaseHandler\n        ? handlersMap[buttonConfig.releaseHandler]\n        : null;\n      const button = new Button(buttonConfig, handler, releaseHandler);\n      row.append(button.getElement());\n      buttons.push(button);\n    });\n\n    keyBoard.append(row);\n    // body.append(row);\n  });\n\n  body.append(keyBoard);\n\n  body.addEventListener('keydown', (event) => {\n    event.preventDefault();\n    const isButton = event.key;\n    if (!isButton) {\n      return;\n    }\n\n    const filteredButtons = findPressedButtons(event.key);\n    if (filteredButtons.length) {\n      filteredButtons.forEach((btn) => btn.setPressed(true));\n    }\n  });\n\n  body.addEventListener('keyup', (event) => {\n    event.preventDefault();\n    const isButton = event.key;\n    if (!isButton) {\n      return;\n    }\n\n    const filteredButtons = findPressedButtons(event.key);\n    if (filteredButtons.length) {\n      filteredButtons.forEach((btn) => btn.setPressed(false));\n    }\n  });\n}\n","export default function buildTextarea() {\n  const body = document.querySelector('body');\n  const element = document.createElement('textarea');\n\n  element.classList.add('textarea');\n  element.setAttribute('rows', 6);\n  element.setAttribute('placeholedr', 'Write something...');\n  body.append(element);\n}\n","import buildKeyboard from './components/keyboard';\nimport buildTextarea from './components/textarea';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  buildTextarea();\n  buildKeyboard();\n});\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}